import telebot
from telebot import types
import time 
import re
import requests
from datetime import datetime, timedelta
import sqlite3 
from bs4 import BeautifulSoup
import wikipediaapi
import json
import os
import random
from functools import wraps
from spotipy.oauth2 import SpotifyClientCredentials
import spotipy
import subprocess
from datetime import date
from textblob import TextBlob
from telebot import TeleBot
from telebot.types import Message
import logging
from telebot import apihelper
from tinydb import TinyDB, Query
import schedule
import threading
from collections import deque







API_TOKEN = '6978375067:AAHaXyMLPRLkbt639g_ruA37xJZosSzFtfA'
bot = telebot.TeleBot(API_TOKEN)
    







allowed_db = TinyDB('allowed_commands.json')
ignored_db = TinyDB('ignored_users.json')

admin_id = 6282374712

if not ignored_db.all():
    ignored_db.insert({'user_id': -1})  

if not allowed_db.all():
    allowed_db.insert({'user_id': -1}) 

def check_access(user_id):
    allowed_users = [user.get('user_id') for user in allowed_db.all()]
    return user_id in allowed_users

def remove_user_from_ignored(user_id):
    User = Query()
    ignored_db.remove(User.user_id == user_id)

def is_ignored(user_id):
    return bool(ignored_db.search(Query().user_id == user_id))

def add_user_to_allowed(user_id):
    allowed_db.insert({'user_id': user_id})

def remove_user_from_allowed(user_id):
    User = Query()
    allowed_db.remove(User.user_id == user_id)

@bot.message_handler(func=lambda message: is_ignored(message.from_user.id))
def ignore_message(message):
    pass

@bot.message_handler(func=lambda message: message.text.strip().lower() == '+–∏–≥–Ω–æ—Ä')
def add_ignore(message):
    try:
        if str(message.from_user.id) == str(admin_id):
            user_id = message.text.split()[1]
            ignored_db.insert({'user_id': int(user_id)})
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä.")
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(func=lambda message: message.text.strip().lower() == '-–∏–≥–Ω–æ—Ä')
def remove_ignore(message):
    try:
        if str(message.from_user.id) == str(admin_id):
            user_id = message.text.split()[1]
            ignored_db.remove(Query().user_id == int(user_id))
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥–Ω–æ—Ä–∞.")
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(func=lambda message: message.text.strip().lower() == '-–¥–æ—Å—Ç—É–ø')
def add_allowed(message):
    try:
        if str(message.from_user.id) == str(admin_id):
            user_id = message.text.split()[1]
            add_user_to_allowed(int(user_id))
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ.")
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(func=lambda message: message.text.strip().lower() == '+–¥–æ—Å—Ç—É–ø')
def remove_allowed(message):
    try:
        if str(message.from_user.id) == str(admin_id):
            user_id = message.text.split()[1]
            remove_user_from_allowed(int(user_id))
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
    


      
         
               
# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def handle_start(message):
    if message.chat.type == 'private':
        user_id = message.from_user.id


    if check_access(user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
        admin_name = message.from_user.first_name
        admin_greeting = f"üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, [{admin_name}](tg://user?id={user_id}).\nüßë‚Äç‚úàÔ∏è–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∫–∏ —á–∞—Ç–æ–≤ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª.\nüí°–í–∞—à —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∂–µ."

        admin_keyboard = types.InlineKeyboardMarkup()
        admin_url_button = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã", url="https://teletype.in/@drmotory/98olfMhylw5")
        user_url_button = types.InlineKeyboardButton(text="–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", url="https://teletype.in/@drmotory/commands_support")
        admin_keyboard.add(admin_url_button, user_url_button)  

        bot.send_message(message.chat.id, admin_greeting, parse_mode='Markdown', reply_markup=admin_keyboard)
    else:
        welcome_message = (
            f"üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, [{message.from_user.first_name}](tg://user?id={user_id}).\n"
            "ü§ñ–Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–µ—Ç–∫–∏ —á–∞—Ç–æ–≤ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª.\n"
            "üí°–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –¥–ª—è –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ [–≤ —ç—Ç–æ—Ç —á–∞—Ç](https://t.me/+LDPqIG1XW7dkNzgy)"
        )

        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã", url="https://teletype.in/@drmotory/commands_support")
        keyboard.add(url_button)

        bot.send_message(message.chat.id, welcome_message, parse_mode='Markdown', reply_markup=keyboard)




        
        
        






@bot.message_handler(func=lambda message: message.text.strip().lower() in ['–∫–æ–º–∞–Ω–¥—ã', '—Å–∞–ø –∫–æ–º–∞–Ω–¥—ã', '.–∫–æ–º–∞–Ω–¥—ã', '!–∫–æ–º–∞–Ω–¥—ã', '/commands@sapcmbot', '/commands', '/–∫–æ–º–∞–Ω–¥—ã'])
def handle_help(message):
    if message.chat.type == 'private':
        if check_access(message.from_user.id):
            admin_name = message.from_user.first_name
            admin_greeting = "üí°–ú–æ–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∂–µ.\nüö´–†–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–ø—Ä–µ—â–µ–Ω–æ\n‚ùóÔ∏è–ö–∞—Ä–∞–µ—Ç—Å—è —Å–Ω—è—Ç–∏–µ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º"

            admin_keyboard = types.InlineKeyboardMarkup()
            admin_url_button = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã", url="https://teletype.in/@drmotory/98olfMhylw5")
            user_url_button = types.InlineKeyboardButton(text="–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", url="https://teletype.in/@drmotory/commands_support")
            admin_keyboard.add(admin_url_button, user_url_button)

            welcome_message = admin_greeting + "\n\n"
            welcome_message += "üí°–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –¥–ª—è –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ [—Å–æ–∑–¥–∞—Ç–µ–ª—é](https://t.me/ww0qn) –±–æ—Ç–∞."
            keyboard = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã", url="https://teletype.in/@drmotory/commands_support")
            keyboard.add(url_button)
            admin_keyboard.add(url_button)

            bot.send_message(message.chat.id, welcome_message, parse_mode='Markdown', reply_markup=keyboard)
        else:
            welcome_message = "–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∂–µ"

            keyboard = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã", url="https://teletype.in/@drmotory/commands_support")
            keyboard.add(url_button)

            bot.send_message(message.chat.id, welcome_message, reply_markup=keyboard)
    else:
        welcome_message = "–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∂–µ"
        
        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã", url="https://teletype.in/@drmotory/commands_support")
        keyboard.add(url_button)
        
        bot.send_message(message.chat.id, welcome_message, reply_markup=keyboard)


        
                
                        
                                
                                        
                                                
                                                                

        
                
                        

                                        
                                                
                                                        
                                                                
                                                                        
                                                                                
                                                                                                
        
        
        
        
        

#–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–∏—á–∫–æ–≤

@bot.chat_join_request_handler()
def handle_join_request(message):
    user_link = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {user_link}!\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ü—Ä–æ—Å–∏–º –Ω–∞–±—Ä–∞—Ç—å—Å—è —Ç–µ—Ä–ø–µ–Ω–∏—è.\n\n–ü–æ–∫–∞ –∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º [–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏](https://teletype.in/@drmotory/psc)", parse_mode="Markdown")

        
        
        
        
        
        
        
        
        
        
#–ø—Ä–∞–≤–∏–ª–∞
allowed_users = ['6282374712']	
allowed_db = TinyDB('allowed_commands.json')

helpers = {}

def check_access(user_id):
    allowed_users = [user.get('user_id') for user in allowed_db.all()]
    return user_id in allowed_users

default_message = "üòï–ê–¥–º–∏–Ω—ã —Ö–æ–ª—Ç—É—Ä—â–∏–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤. –∞–¥–º–∏–Ω–∞–º –æ–± —ç—Ç–æ–º.\n"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–≤–∏–ª
@bot.message_handler(func=lambda message: message.text.strip().lower() in ['–ø—Ä–∞–≤–∏–ª–∞', '—Å–∞–ø –ø—Ä–∞–≤–∏–ª–∞', '.–ø—Ä–∞–≤–∏–ª–∞', '!–ø—Ä–∞–≤–∏–ª–∞', '/rules@sapcmbot', '/rules', '/–ø—Ä–∞–≤–∏–ª–∞'])
def send_rules(message):
    rules_message = "[–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞](https://teletype.in/@drmotory/psc)\n\n"\
                    "–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∞–º:\n"

    if not helpers:  
        rules_message += default_message
    else:
        for user_id, user_link in helpers.items():
            user_info = bot.get_chat_member(message.chat.id, user_id)
            user_name = user_info.user.first_name
            user_link = user_info.user.id
            rules_message += f"[{user_name}](tg://openmessage?user_id={user_link})\n"

    rules_message += "‚ùóÔ∏è–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç —Ä—è–¥–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ [—Ä–µ–ø–æ—Ä—Ç](https://teletype.in/@drmotory/commands_support#G56k)."
    bot.reply_to(message, rules_message, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã +–ø–æ–º–æ—â—å
@bot.message_handler(func=lambda message: message.text.strip().lower() == '+–ø–æ–º–æ—â—å')
def add_helper(message):
    if check_access(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_info = bot.get_chat_member(message.chat.id, user_id)
        user_name = user_info.user.first_name
        user_link = user_info.user.id
        helpers[user_id] = f"[{user_name}](tg://openmessage?user_id={user_link})"
        bot.reply_to(message, "–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã -–ø–æ–º–æ—â—å
@bot.message_handler(func=lambda message: message.text.strip().lower() == '+–ø–æ–º–æ—â—å')
def remove_helper(message):
    if check_access(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        if user_id in helpers:
            del helpers[user_id]
            bot.reply_to(message, "–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.")
        else:
            bot.reply_to(message, "–í—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã !–æ—Ç–æ–∑–≤–∞—Ç—å –∏–∑ –ø–æ–º–æ—â–∏ @username
@bot.message_handler(func=lambda message: message.text.startswith('!–æ—Ç–æ–∑–≤–∞—Ç—å –∏–∑ –ø–æ–º–æ—â–∏'))
def remove_specific_helper(message):
   if str(message.from_user.id) in allowed_users:    
    to_remove = message.text.split('@')[-1].strip()
    for user_id, user_link in helpers.items():
        if to_remove in user_link:
            del helpers[user_id]
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {to_remove} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.")
            return
    
    bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.")
    
    
    
    
    
    
    
    
    
    #–∫–∞–∫ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–µ–∫—Ç–∏–≤
@bot.message_handler(func=lambda message: message.text.strip().lower() == '.–∫–∫')
def send_rules(message):
    rules_message = "[–ö–∞–∫ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–µ–∫—Ç–∏–≤?](https://teletype.in/@drmotory/chatrules)\n—É–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Ä–µ–±—è—Ç–∞üß∏"
    bot.reply_to(message, rules_message, parse_mode="Markdown")    
    
    
    
    
    
    
    
    

#—á–∞—Ç 1 –∑–∞–∫—Ä–µ–ø
allowed_users = ['6282374712']

@bot.message_handler(func=lambda message: message.text.strip().lower() == '!–¥–æ—Ä–ø–∏–Ω')
def send_and_pin_messages(message):
   if str(message.from_user.id) in allowed_users:
    messages_to_send = [
        "[üëã](https://teletype.in/@drmotory/collective-2)–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´[ü¶¶·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è](https://t.me/drmitory)¬ª.\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–µ–±–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—ã—Ö, –¥—Ä—É–∑–µ–π –∏ –º–æ–∂–µ—Ç –¥–∞–∂–µ –ø–∞—Ä—É!\n\n–û—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è —á—Ç–æ –≤–∞–º —É –Ω–∞—Å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤ —Ç–æ –Ω–µ –Ω–∞–¥–æ –º–æ–ª—á–∞—Ç—å, –∞ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∏ –æ–±—â–∞—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞.\n\n[ü´Ç –ö–∞–∫ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤](https://teletype.in/@drmotory/collective-2)\n\n‚ÑπÔ∏è –ú—ã —Ö–æ—Ç–∏–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —á–∞—Ç–µ. –ï—Å–ª–∏ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫ –ø–æ–ø—Ä–æ—Å–∏–ª –Ω–µ —Ç–µ–≥–∞—Ç—å / –æ—Ç–≤–µ—á–∞—Ç—å –µ–º—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –Ω–µ —Å—Ç–æ–∏—Ç —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å, –≤–µ–¥—å –∑–∞ —ç—Ç–æ –≤–∞–º –≤—ã–¥–∞–¥—É—Ç –º—É—Ç.\n\n–í—Å–µ –Ω–∞—à–∏ —á–∞—Ç—ã:\n[ü¶¶·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è](https://t.me/drmotory)\n[üéÆ·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | –ò–≥—Ä—ã](https://t.me/drmitory_play)\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞.\n–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–æ–≤ —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ªüîΩ",
        "[–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏ —á–∞—Ç–æ–≤ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª](https://teletype.in/@drmotory/psc)\n[–ü—Ä–∞–≤–∏–ª–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞](https://teletype.in/@drmotory/chatrules#Cgz9)\n‚ùó –ê–¥–º–∏–Ω—ã –∏ –º–æ–¥–µ—Ä—ã –≤–ø—Ä–∞–≤–µ –≤—ã–¥–∞—Ç—å —Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º.",
        "–ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üå∫"
    ]
    
    sent_messages = []  
    for text in messages_to_send:
        sent_message = bot.send_message(message.chat.id, text, parse_mode="Markdown")
        sent_messages.append(sent_message)

    
    bot.pin_chat_message(message.chat.id, sent_messages[0].message_id)







@bot.message_handler(func=lambda message: message.text.strip().lower() == '!–ø–ª–ø–∏–Ω')
def send_and_pin_messages(message):
   if str(message.from_user.id) in allowed_users:
    messages_to_send = [
        "[üëã](https://teletype.in/@drmotory/chatrules)–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´[üéÆ·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | –ò–≥—Ä—ã](https://t.me/drmitory_play)¬ª\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã,–ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –∑–∞—Å–æ—Ä—è—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç.\n\n–ú—ã —Å–æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä,–∏ –≥–æ—Ç–æ–≤—ã –¥–∞—Ç—å –≤–∞–º —Å—ã–≥—Ä–∞—Ç—å –≤–æ –º–Ω–æ–≥–∏–µ –∏–≥—Ä—ã!\n–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ –æ—Ç–º–µ—Ç—å—Ç–µ –∫–æ–≥–æ –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ –∏ —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç,–∞ —Ç–∞–º –∞–¥–º–∏–Ω—ã —Ä–µ—à–∞—Ç,–¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ –Ω–µ—Ç.\n\n–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –¥–ª—è [–æ–±—â–µ–Ω–∏—è](https://t.me/drmitory),–≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –∏–≥—Ä–æ–≤—ã—Ö –±–æ—Ç–æ–≤.\n‚ÄºÔ∏è–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è,–ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ [–ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏.](https://teletype.in/@drmotory/psc)\n[ü´Ç–ì–∞–π–¥ –∫–∞–∫ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤](https://teletype.in/@drmotory/collective-2)\n\n–í—Å–µ –Ω–∞—à–∏ —á–∞—Ç—ã:\n[ü¶¶·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è](https://t.me/drmitory)\n[üéÆ·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | –ò–≥—Ä—ã](https://t.me/drmitory_play)",
        "–ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü—Ä–∏—è—Ç–Ω—ã—Ö –∏–≥—Äüå∫"
    ]
    
    sent_messages = []  
    for text in messages_to_send:
        sent_message = bot.send_message(message.chat.id, text, parse_mode="Markdown")
        sent_messages.append(sent_message)

    
    bot.pin_chat_message(message.chat.id, sent_messages[0].message_id)










    

    
    
    


# –†–ï–ü–û–†–¢–´
ADMIN_CHATS = [-1002129257694]

MUTE_DURATION = 3600 

user_reports = {}

@bot.message_handler(func=lambda message: message.text.strip().lower() in ['—Ä–µ–ø–æ—Ä—Ç', '—Å–∞–ø —Ä–µ–ø–æ—Ä—Ç', '.—Ä–µ–ø–æ—Ä—Ç', '!—Ä–µ–ø–æ—Ä—Ç', '/report@sapcmbot', '/report', '.–∂–∞–ª–æ–±–∞'])
def handle_report(message):
    user_id = message.from_user.id
    current_time = time.time()

    replied_message = message.reply_to_message
    if replied_message:
        report_reason = ' '.join(message.text.split()[1:]) if len(message.text.split()) > 1 else ''
        
        report_content = get_report_content(replied_message)  
        reported_user_link = f"[{replied_message.from_user.first_name}](https://t.me/{replied_message.from_user.username}) ({replied_message.from_user.id})"
        report_text = f'üõë–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞\nüìù–¢–µ–∫—Å—Ç: {report_content}\nüó£–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∂–∞–ª–æ–±—ã: [{message.from_user.first_name}](https://t.me/{message.from_user.username}) ({message.from_user.id})\nüë§–ñ–∞–ª–æ–±–∞ –∫–∏–Ω—É–ª–∏ –Ω–∞: {reported_user_link}'
        inline_keyboard = types.InlineKeyboardMarkup()
        delete_button = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"delete_report_{replied_message.message_id}")
        goto_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", url=f"https://t.me/{replied_message.chat.username}/{replied_message.message_id}")
        inline_keyboard.row(goto_button, delete_button)

        for admin_chat_id in ADMIN_CHATS:
            sent_message = bot.send_message(admin_chat_id, report_text, parse_mode="Markdown", reply_markup=inline_keyboard)
            if replied_message:
                bot.reply_to(message, f'‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.')
                
    if user_id in user_reports:
        reports, last_check_time = user_reports[user_id]
        if current_time - last_check_time < 60:  
            reports += 1
            if reports >= 5:
                bot.restrict_chat_member(message.chat.id, user_id, until_date=int(current_time + MUTE_DURATION))  
                bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 —á–∞—Å –∑–∞ —á–∞—Å—Ç—ã–µ —Ä–µ–ø–æ—Ä—Ç—ã.")
                reports = 0  
        else:
            reports = 1

        user_reports[user_id] = (reports, current_time)

def get_report_content(message):
    if message.content_type == 'text':
        return message.text
    else:
        content_types = {
            'photo': '—Ñ–æ—Ç–æ',
            'video': '–≤–∏–¥–µ–æ',
            'animation': '–≥–∏—Ñ',
            'sticker': '—Å—Ç–∏–∫–µ—Ä'
        }
        return f"–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ {content_types.get(message.content_type, '–∫–æ–Ω—Ç–µ–Ω—Ç')}"

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_report_'))
def handle_delete_report(call):
    message_id_to_delete = int(call.data.split('_')[2])
    bot.delete_message(call.message.chat.id, message_id_to_delete)
    bot.delete_message(call.message.chat.id, call.message.message_id)




        
        
        
        
        
           # –ó–ê–ö–†–ï–ü–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
@bot.message_handler(func=lambda message: message.text.lower() == '+–ø–∏–Ω')
def pin_message(message):
    if str(message.from_user.id) in allowed_users:
        if message.reply_to_message:
            bot.pin_chat_message(message.chat.id, message.reply_to_message.message_id)
        else:
            bot.reply_to(message, "–ß—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π '.–∑–∞–∫—Ä–µ–ø–∏'.")
    else:
        bot.reply_to(message, "üîí —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

@bot.message_handler(func=lambda message: message.text.lower() == '-–ø–∏–Ω')
def unpin_message(message):
    if str(message.from_user.id) in allowed_users:
        bot.unpin_chat_message(message.chat.id)
    else:
        bot.reply_to(message, "üîí—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")









# –ü–ê–°–•–ê–õ–ö–ò

@bot.message_handler(func=lambda message: message.text.strip().lower() == '—Ç—Ä–∞—Ö–Ω—É—Ç—å')
def trahnyt(message):
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAI4KmWQQn1IgBruxORYEt2U63SKP_f3AAIiGwACLfMgSY5qlUuuShdkNAQ",
        reply_to_message_id=message.message_id
    )    
    
@bot.message_handler(func=lambda message: message.text.strip().lower() == '–º–æ–π—à–∞ –ª—É—á—à–∏–π')
def arlan_gay(message):
    bot.reply_to(message, '—Ñ–∞–∫—Ç—ã..')
      
@bot.message_handler(func=lambda message: message.text.strip().lower() == '–º–æ–π—à–∞')
def lustra(message):
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAI4IWWQQb1lgPL7dUdDT7PxgN1159MwAAJWAAMdHI0jdnCU7xj5UYw0BA",
        reply_to_message_id=message.message_id
    )    
        
@bot.message_handler(func=lambda message: message.text.strip().lower() == '–¥–æ—Ä–º–∏—Ç–æ—Ä–∏')
def arlan_gay(message):
    bot.reply_to(message, '–ª—É—á—à–∏–π —á–∞—Ç–∏–∫')
    
@bot.message_handler(func=lambda message: message.text.strip().lower() == '–≤—ã–µ–±–∞—Ç—å')
def trahnyt(message):
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAI4KmWQQn1IgBruxORYEt2U63SKP_f3AAIiGwACLfMgSY5qlUuuShdkNAQ",
        reply_to_message_id=message.message_id
    )    
    
@bot.message_handler(func=lambda message: message.text.strip().lower() == '—É–º—Ä–∏')
def trahnyt(message):
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAI4KmWQQn1IgBruxORYEt2U63SKP_f3AAIiGwACLfMgSY5qlUuuShdkNAQ", 
        reply_to_message_id=message.message_id
    )
    
    
    
@bot.message_handler(func=lambda message: message.text.strip().lower() == '–∫—Ä–∏–Ω–∂')
def arlan_gay(message):
    bot.reply_to(message, '—Ç—ã.')
        
    
            

@bot.message_handler(func=lambda message: message.text.lower() == '–∞–¥–º–∏–Ω—ã —á–º–æ—â–Ω–∏–∫–∏')
def admins_are_cool(message):
    bot.send_chat_action(message.chat.id, 'typing')  # –û—Ç–ø—Ä–∞–≤–∫–∞ "–Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞" –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∞–∫—Ü–∏–∏
    bot.reply_to(message, "ü§°")    
    

 #–õ–°
@bot.message_handler(func=lambda message: message.text.strip().lower() == '–ª—Å —Å–∞–ø–∞')
def handle_message(message):
    bot.reply_to(message, "—Ç—ã–∫–Ω–∏—Ç–µ –Ω–∞ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    
    
    
    
    
    
    
    
    
    
#–†–ê–°–°–´–õ–ö–ê    
allowed_users = ['6282374712', '5369435686', '5707946795']

@bot.message_handler(func=lambda message: message.text.strip().lower() == '.—Å–µ—Ç–∫–∞')
def send_to_channels(message):
   if str(message.from_user.id) in allowed_users:  
    chat_ids = [-1001962093804, -1002129257694, -1002004292832] 
    text = message.text.replace('/—Å–µ—Ç–∫–∞', '') 
    for chat_id in chat_ids:
        sent_message = bot.send_message(chat_id, text)
        bot.pin_chat_message(chat_id, sent_message.message_id) 
        
        
        
        
        
#–ø–∏–Ω–≥–∏
@bot.message_handler(func=lambda message: message.text.strip().lower() == '.–ø–∏—É')
def ping(message): 
    start_time = time.time()
    sent = bot.send_message(message.chat.id, '–ü–æ–¥—Å—á–µ—Ç...')
    end_time = time.time()
    bot.edit_message_text(f'üõ†Ô∏è–ü–ê–£!\nüöÄ–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {round((end_time - start_time) * 1000, 2)} –º—Å', message.chat.id, sent.message_id)
    
    

    
@bot.message_handler(func=lambda message: message.text.strip().lower() == '–ø–∏—É')
def ping(message): 
    start_time = time.time()
    sent = bot.send_message(message.chat.id, '–ü–æ–¥—Å—á–µ—Ç...')
    end_time = time.time()
    bot.edit_message_text(f'üõ†Ô∏è–ü–ê–£!\nüöÄ–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {round((end_time - start_time) * 1000, 2)} –º—Å', message.chat.id, sent.message_id)
    
    
    
    
@bot.message_handler(func=lambda message: message.text.strip().lower() == '.–ø–∏–Ω–≥')
def ping(message):  
    start_time = time.time()
    sent = bot.send_message(message.chat.id, '–ü–æ–¥—Å—á–µ—Ç...')
    end_time = time.time()
    bot.edit_message_text(f'üõ†Ô∏è–ü–û–ù–ì!\nüöÄ–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {round((end_time - start_time) * 1000, 2)} –º—Å', message.chat.id, sent.message_id)   
    
       
          
    
@bot.message_handler(func=lambda message: message.text.strip().lower() == '–ø–∏–Ω–≥')
def ping(message): 
    start_time = time.time()
    sent = bot.send_message(message.chat.id, '–ü–æ–¥—Å—á–µ—Ç...')
    end_time = time.time()
    bot.edit_message_text(f'üõ†Ô∏è–ü–û–ù–ì!\nüöÄ–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {round((end_time - start_time) * 1000, 2)} –º—Å', message.chat.id, sent.message_id)    
    
    
    
   
    
    
    
    
    
    
    #–°–ï–¢–ö–ê

@bot.message_handler(func=lambda message: message.text.strip().lower() == '.—Å–µ—Ç–∫–∞')
def send_chat_grid(message):
    chat_grid_message = "ü•∏ ·è¥·¥Ñ·¥á —á·¥Ä·¥õ—ã ·¥ã·¥è·¥õ·¥è·¥©—ã·¥á ·¥á·¥Ñ·¥õ—å  ô ·¥Ñ·¥á·¥õ·¥ã·¥á"
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="ü¶¶·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | —á–∞—Ç–∏–∫", url="https://t.me/drmitory")
    button2 = types.InlineKeyboardButton(text="üéÆ·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | –ò–≥—Ä—ã", url="https://t.me/drmitory_play")
    markup.add(button1, button2)
    bot.send_message(message.chat.id, chat_grid_message, reply_markup=markup)
    
    
    
    
    
    
    
    
    #–í–´–•–û–î –ò–ó –ß–ê–¢–ê
#–°–ö–†–´–¢–ê–Ø
@bot.message_handler(func=lambda message: message.text.strip().lower() == '.–ª–∏–≤–Ω–∏')
def leave_chat(message):
    if str(message.from_user.id) in allowed_users:
        chat_id = re.search(r'.–ª–∏–≤–Ω–∏ (.+)', message.text).group(1)

        try:
            bot.leave_chat(chat_id)
            bot.reply_to(message, f"Successfully left the chat {chat_id}.")
        except Exception as e:
            bot.reply_to(message, f"An error occurred: {e}")
    else:
        bot.reply_to(message, "You are not authorized to execute this command.")
        
        
        
        
        
        
        

        
        #–û–ü–†–û–°–´
allowed_users = ['6282374712', '5369435686', '5707946795']
        
@bot.message_handler(func=lambda message: message.text.lower().startswith('–æ–ø—Ä–æ—Å '))
def create_poll(message):
    if str(message.from_user.id) in allowed_users:
        poll_text = message.text.replace("–æ–ø—Ä–æ—Å", "").strip()
        options = poll_text.split("\n")
        question = options[0]
        answers = options[1:]
        if len(answers) > 8:
            bot.reply_to(message, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ - 8")
            return
        poll = types.Poll(question=question, options=answers, is_anonymous=False)
        sent_poll = bot.send_poll(message.chat.id, question, options=answers, is_anonymous=False)
        bot.pin_chat_message(message.chat.id, sent_poll.message_id, disable_notification=False)
        
        
        

        
                

                                                
                                

                                                
                                                                                     #–º—É–∑—ã–∫–∞
SPOTIFY_CLIENT_ID = '4d142088786c487eac0f901facb86ea9'
SPOTIFY_CLIENT_SECRET = 'bb56bdb3a0d34515905d15f23bf8cd4c'

@bot.message_handler(func=lambda message: message.text.lower().startswith('.—Å–ø–æ—Ç–∏'))
def music_command(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–ò—â—É —Ç—Ä–µ–∫...") 

    query = message.text.split(' ', 1)[1] 
    track = find_track(query)
    if track:
        bot.delete_message(chat_id, msg.message_id) 
        response_msg = bot.send_message(chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞: " + track['name'])  
        audio_file = download_audio(track['preview_url']) 
        audio = open(audio_file, 'rb')
        bot.send_audio(chat_id, audio, reply_to_message_id=response_msg.message_id)
        audio.close()
        os.remove(audio_file) 
    else:
        bot.delete_message(chat_id, msg.message_id) 
        bot.send_message(chat_id, "–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def find_track(query):
    sp = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials(client_id=SPOTIFY_CLIENT_ID, client_secret=SPOTIFY_CLIENT_SECRET))
    results = sp.search(q='track:' + query, type='track')
    if results['tracks']['items']:
        return results['tracks']['items'][0] 
    else:
        return None

def download_audio(url):
    response = requests.get(url)
    file_name = 'temp_audio.mp3'
    with open(file_name, 'wb') as f:
        f.write(response.content)
    return file_name

        
        
        
        
        
        
#–∞–Ω–∫–µ—Ç–æ–¥—ã               
@bot.message_handler(func=lambda message: message.text.lower() == '–∞–Ω–µ–∫–¥–æ—Ç')
def send_joke(message):
    try:
        response = requests.get('http://rzhunemogu.ru/RandJSON.aspx?CType=1')
        data = response.json()

        if data["content"]:
            bot.reply_to(message, data["content"])
        else:
            bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        print(e)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞.")
        
        
        
        
        
        
        
 #–ú–£–¢           
allowed_db = TinyDB('allowed_commands.json')
ignored_db = TinyDB('ignored_users.json')
admin_id = 6282374712

def user_can_restrict_members(user_id, chat_id):
    members = bot.get_chat_administrators(chat_id)
    for member in members:
        if member.user.id == user_id:
            return True
    return False

def is_user_allowed(user_id):
    return bool(allowed_db.search(Query().user_id == user_id))

@bot.message_handler(func=lambda message: message.text.strip().lower() in ['+–º—É—Ç', '—Å–∞–ø –º—É—Ç', '/muted'] and is_user_allowed(message.from_user.id))
def mute_user(message):
    try:
        args = message.text.split(' ')
        if len(args) < 2:
            duration = 60 
            duration_str = "1 —á–∞—Å"
        else:
            duration_str = args[1]
            duration_val = int(duration_str[:-1])
            duration_unit = duration_str[-1]
            if duration_unit not in ['–º', '—á', '–¥']:
                bot.send_message(message.chat.id, "–≤—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–ª—å–∑—è.")
                return
            if duration_unit == '–º':
                duration = duration_val * 60  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
            elif duration_unit == '—á':
                duration = duration_val * 60 * 60 
            else:
                duration = duration_val * 60 * 60 * 24
            
        if message.reply_to_message:
            user = message.reply_to_message.from_user
        else:
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º—É—Ç–∞")
            return

        until_date = int((datetime.now() + timedelta(seconds=duration)).timestamp())
        bot.restrict_chat_member(message.chat.id, user.id, until_date)

        moderator_link = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
        user_link = f"[{user.first_name}](tg://user?id={user.id})"
        mute_message = f"üë§–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_str}\nüßë‚Äç‚úàÔ∏è–º–æ–¥–µ—Ä: {moderator_link}"
        bot.send_message(message.chat.id, mute_message, parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.text.lower().startswith('-–º—É—Ç') and is_user_allowed(message.from_user.id))
def unmute_user(message):

    if message.reply_to_message:
        user = message.reply_to_message.from_user
        if user.username:
            user_mention = f"[{user.first_name}](tg://user?id={user.id})"
        else:
            user_mention = user.first_name
        bot.restrict_chat_member(
            message.chat.id,
            user.id,
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True
        )
        unmute_message = f"üë§–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} —Ä–∞–∑–º—É—á–µ–Ω\nüßë‚Äç‚úàÔ∏è–º–æ–¥–µ—Ä: [{message.from_user.first_name}](tg://user?id={message.from_user.id})"
        bot.send_message(message.chat.id, unmute_message, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å.")

        
        
        
        
        
        
#–ê–¥–º–∏–Ω–∫–∞
allowed_users = ['6282374712', '5369435686', '5707946795']

@bot.message_handler(func=lambda message: message.text.lower() == '+–∞–¥–º–∏–Ω')
def promote_to_admin(message):
    if str(message.from_user.id) in allowed_users:
        user = message.from_user
        if user.username:
            user_mention = f"[{user.first_name}](tg://user?id={user.id})"
        else:
            user_mention = user.first_name
        bot.promote_chat_member(message.chat.id, user.id, can_manage_chat=True, can_delete_messages=True, 
                                can_invite_users=True, can_restrict_members=True, 
                                can_pin_messages=True, can_promote_members=True
                               )
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_mention} –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text.lower() == '-–∞–¥–º–∏–Ω')
def demote_from_admin(message):
    if str(message.from_user.id) in allowed_users:
        if message.reply_to_message:
            user = message.reply_to_message.from_user
            if user.username:
                user_mention = f"[{user.first_name}](tg://user?id={user.id})"
            else:
                user_mention = user.first_name
            bot.promote_chat_member(message.chat.id, user.id, can_change_info=False, can_post_messages=True,
                                    can_edit_messages=False, can_delete_messages=False, can_invite_users=False,
                                    can_restrict_members=False, can_pin_messages=False, can_promote_members=False)
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_mention} —Å–Ω—è—Ç—ã –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞.", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å –∞–¥–º–∏–Ω–∫–∏")
            
            
            
            
            
            
            
            
allowed_db = TinyDB('allowed_commands.json')
ignored_db = TinyDB('ignored_users.json')
admin_id = 6282374712

def user_can_restrict_members(user_id, chat_id):
    members = bot.get_chat_administrators(chat_id)
    for member in members:
        if member.user.id == user_id:
            return True
    return False

def is_user_allowed(user_id):
    return bool(allowed_db.search(Query().user_id == user_id))

@bot.message_handler(func=lambda message: message.text.lower().startswith('+–±–∞–Ω') and is_user_allowed(message.from_user.id))
def ban_user(message):
    chat_id = message.chat.id
    bot_info = bot.get_me()
    bot_member = bot.get_chat_member(chat_id, bot_info.id)
    user_id = message.reply_to_message.from_user.id if message.reply_to_message else None

    if bot_member.status in ["creator", "administrator"]:
        if user_id:
            user_info = bot.get_chat_member(chat_id, message.from_user.id)
            if "administrator" in user_info.status or user_info.status == "creator":
                bot.kick_chat_member(chat_id, user_id)
                banned_user = message.reply_to_message.from_user
                ban_message = f"üë§–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{banned_user.first_name}](tg://user?id={banned_user.id}) –∑–∞–±–∞–Ω–µ–Ω\nüßë‚Äç‚úàÔ∏è–º–æ–¥–µ—Ä: [{message.from_user.first_name}](tg://user?id={message.from_user.id})"
                bot.reply_to(message, ban_message, parse_mode="Markdown")
        else:
            bot.reply_to(message, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å.")
    else:
        bot.reply_to(message, "–£ –º–µ–Ω—è –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@bot.message_handler(func=lambda message: message.text.lower().startswith('-–±–∞–Ω') and is_user_allowed(message.from_user.id))
def unban_user(message):
    chat_id = message.chat.id
    bot_info = bot.get_me()
    bot_member = bot.get_chat_member(chat_id, bot_info.id)
    user_id = message.reply_to_message.from_user.id if message.reply_to_message else None

    if bot_member.status in ["creator", "administrator"]:
        if user_id:
            bot.unban_chat_member(chat_id, user_id)
            unbanned_user = message.reply_to_message.from_user
            unban_message = f"üë§–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{unbanned_user.first_name}](tg://user?id={unbanned_user.id}) —Ä–∞–∑–±–∞–Ω–µ–Ω\nüßë‚Äç‚úàÔ∏è–º–æ–¥–µ—Ä: [{message.from_user.first_name}](tg://user?id={message.from_user.id})"
            bot.reply_to(message, unban_message, parse_mode="Markdown")
        else:
            bot.reply_to(message, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å.")
    else:
        bot.reply_to(message, "–£ –º–µ–Ω—è –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")

        
        
        
        
        
        
        
#–≤–∏–∫–∏–ø–µ–¥–∏—è
wiki_wiki = wikipediaapi.Wikipedia(
    language='ru',
    extract_format=wikipediaapi.ExtractFormat.WIKI,
    user_agent='wikipedia'
)

@bot.message_handler(func=lambda message: message.text.lower().startswith('.–≤–∏–∫–∏'))
def wiki_search(message):
    query = message.text[5:].strip() 
    page = wiki_wiki.page(query)
    if page.exists():
        summary = page.summary[:1500]  
        bot.reply_to(message, summary)
    else:
        bot.reply_to(message, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        
        
        
        
        
                
#–°–ª–æ–≤–∞—Ä—å
@bot.message_handler(func=lambda message: message.text.lower().startswith('.—Å–ª–æ–≤–∞—Ä—å'))
def define_word(message):
    command_parts = message.text.split(' ')
    if len(command_parts) > 1:
        word = command_parts[1]
        response = requests.get(f'https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=dict.1.1.20240101T213553Z.26e7fed62e078769.7468573f9cdcb622ca5087c8a063fc37b904dfde&lang=ru-ru&text={word}')

        if response.status_code == 200:
            data = response.json()
            if 'def' in data and data['def']:
                meanings = data['def'][0]['tr']
                response_message = f"üìñ –ü–æ—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ {word}\n"
                for index, meaning in enumerate(meanings, start=1):
                    response_message += f"{index}‚É£ {meaning['text']}\n"
                bot.send_message(message.chat.id, response_message)
            else:
                bot.send_message(message.chat.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    else:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '—Å–ª–æ–≤–∞—Ä—å' —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        
        
        
        
        
        
        
#–∫–æ–Ω–∫—É–ª—è—Ç–æ—Ä        
@bot.message_handler(func=lambda message: message.text.startswith('.—Ä–µ—à–∏'))
def solve_expression(message):
    expression = re.search(r'\.—Ä–µ—à–∏ (.+)', message.text).group(1)
    try:
        result = eval(expression)
        bot.reply_to(message, f"üë®‚Äçüè´ {expression} = {result}")
    except Exception as e:
        bot.reply_to(message, "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–º–µ—Ä –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.") 
        
        

                                            
                                                                                     
@bot.message_handler(commands=['–Ω–∞–∑–≤–∞–Ω–∏–µ'])
def change_chat_name(message):
    try:
        chat_member = bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status in ['administrator', 'creator']:
            new_chat_name = message.text.split(maxsplit=1)[1]  
            global old_chat_name 
            old_chat_name = bot.get_chat(message.chat.id).title 
            bot.set_chat_title(message.chat.id, new_chat_name)
            response = f"üîÑ–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ.\n‚ùé–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {old_chat_name}\n‚úÖ–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_chat_name}"
            bot.reply_to(message, response)
        else:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞.")
    except (IndexError, AttributeError):
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['–æ–ø–∏—Å–∞–Ω–∏–µ'])
def change_chat_description(message):
    try:
        chat_member = bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status in ['administrator', 'creator']:
            new_chat_description = message.text.split(maxsplit=1)[1]  
            global old_chat_description  
            old_chat_description = bot.get_chat(message.chat.id).description  
            bot.set_chat_description(message.chat.id, new_chat_description)  
            response = f"üîÑ–û–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ.\n‚ùé–°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {old_chat_description}\n‚úÖ–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {new_chat_description}"
            bot.reply_to(message, response)
        else:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —á–∞—Ç–∞.")
    except (IndexError, AttributeError):
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        
        
        
        
        


        

         
                        
                                        
                
                                

        
    
    
    
  
        
   
        
             
                  

                       
                                              
                                                                     
chat_states = {}

# –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É "–ú–∏–Ω—ã" –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
@bot.message_handler(commands=['–∏–≥—Ä—ã', 'play@sapcmbot', 'play'])
def show_games(message):
    markup = types.InlineKeyboardMarkup()
    
    rps_button = types.InlineKeyboardButton(text='–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', callback_data='rps')

    markup.row(rps_button)        
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=markup)
    
    

@bot.message_handler(commands=['start_rps'])
def start_rps_game(message):
    chat_id = message.chat.id
    if chat_id in chat_states and chat_states[chat_id]['game'] == 'rps':
        bot.send_message(chat_id, "–ò–≥—Ä–∞ –≤ '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞' —É–∂–µ –Ω–∞—á–∞—Ç–∞!")
    else:
        response = "üëä‚úåÔ∏èüñê –î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞'! –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞."
        bot.send_message(chat_id, response)
        chat_states[chat_id] = {'game': 'rps', 'current_player': message.from_user.id}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥—Ä—ã "–∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
@bot.message_handler(func=lambda message: message.text.lower() in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])
def play_rps(message):
    user_choice = message.text.lower()
    chat_id = message.chat.id
    if chat_id in chat_states and chat_states[chat_id]['game'] == 'rps':
        if message.from_user.id == chat_states[chat_id]['current_player']:
            bot_choice = random.choice(["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])
            if user_choice == bot_choice:
                result = "–ù–∏—á—å—è! –Ø –≤—ã–±—Ä–∞–ª " + bot_choice + "."
            elif (user_choice == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or (user_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice== "–±—É–º–∞–≥–∞") or (user_choice == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å"):
                result = "–¢—ã –ø–æ–±–µ–¥–∏–ª! –Ø –≤—ã–±—Ä–∞–ª " + bot_choice + "."
            else:
                result = "–Ø –ø–æ–±–µ–¥–∏–ª! –Ø –≤—ã–±—Ä–∞–ª " + bot_choice + "."
            bot.send_message(chat_id, result)
            del chat_states[chat_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        else:
            bot.reply_to(message, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")    
            
                                                                                               
                                                                                                                                          
                                                                                                                                                                 

def send_welcome(chat_id, message_id):
    bot.send_message(chat_id,
                     '''üìå *–ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*
                     
–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å [–ø—Ä–∞–≤–∏–ª–∞–º–∏](https://teletype.in/@drmotory/chatrules).
–•–æ—Ç–∏—Ç–µ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤?–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –Ω–∞—à [–≥–∞–π–¥ ¬´ü´Ç–ö–∞–∫ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤¬ª.](https://teletype.in/@drmotory/collective-2)\n\n_–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ._''',
                     parse_mode="Markdown",
                     reply_markup=create_markup(),
                     reply_to_message_id=message_id)  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º id –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ–º

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def create_markup():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞', 'https://teletype.in/@drmotory/chatrules'),
        telebot.types.InlineKeyboardButton('–º–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', 'https://teletype.in/@drmotory/commands_support')
    )
    return markup

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è 'message' –¥–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
@bot.message_handler(func=lambda message: message.forward_from_chat is not None)
def handle_forwarded_message(message):
    if message.forward_from_chat.type == 'channel':
        send_welcome(message.chat.id, message.message_id)                                                                           
                                                                                                                
@bot.message_handler(func=lambda message: message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞?')
def how_are_you(message):
    chance = random.random()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
    if chance <= 0.02:  # –®–∞–Ω—Å 2%, —Ç–æ –µ—Å—Ç—å 0.02
        bot.reply_to(message, "–£ 4 –∞–¥–º–∏–Ω–∞ —Ç–æ—á–Ω–æ —Å—Ä–µ–¥–Ω–µ–Ω—å–∫–æ!")                                                                                                                                            
                                                                                                                                                                        

@bot.message_handler(func=lambda message: message.text.strip().lower() in ['–∞–≥—Ä–µ—Å—Å–∏—è', '—Å–∞–ø –∞–≥—Ä–µ—Å—Å–∏—è', '.–∞–≥—Ä–µ—Å—Å–∏—è', '!–∞–≥—Ä–µ—Å—Å–∏—è', '/–∞–≥—Ä–µ—Å—Å–∏—è'])
def handle_aggression(message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        user_name = message.reply_to_message.from_user.first_name
        mention = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
        warning_message = f"‚õîÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ! –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è {mention} –∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –ê–≥—Ä–µ—Å—Å–∏—è –≤ —á–∞—Ç–∞—Ö —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª –∑–∞–ø—Ä–µ—â–µ–Ω–∞.</b>\n–°–æ–≤–µ—Ç—É–µ–º –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∞–≥—Ä–µ—Å—Å–∏–∏ –≤ –Ω–∞—à–∏—Ö —á–∞—Ç–∞—Ö.\nü§ì<i>–ê–≥—Ä–µ—Å—Å–∏—è</i> ‚Äî —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ –≤—Ä–µ–¥–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É\nüìõ–ó–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º."

        keyboard = types.InlineKeyboardMarkup()
        url_button1 = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏", url="https://teletype.in/@drmotory/chatrules")
        url_button2 = types.InlineKeyboardButton(text="–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", url="https://teletype.in/@drmotory/commands_support")
        keyboard.add(url_button1, url_button2)

        bot.send_message(message.chat.id, warning_message, reply_to_message_id=message.reply_to_message.message_id, reply_markup=keyboard, parse_mode='HTML')
    else:
        warning_message = "‚õîÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ! –ê–≥—Ä–µ—Å—Å–∏—è –≤ —á–∞—Ç–∞—Ö —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª –∑–∞–ø—Ä–µ—â–µ–Ω–∞.</b>\n–°–æ–≤–µ—Ç—É–µ–º –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∞–≥—Ä–µ—Å—Å–∏–∏ –≤ –Ω–∞—à–∏—Ö —á–∞—Ç–∞—Ö.\nü§ì<i>–ê–≥—Ä–µ—Å—Å–∏—è</i> ‚Äî —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ –≤—Ä–µ–¥–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É\nüìõ–ó–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º."

        keyboard = types.InlineKeyboardMarkup()
        url_button1 = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏", url="https://teletype.in/@drmotory/chatrules")
        url_button2 = types.InlineKeyboardButton(text="–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", url="https://teletype.in/@drmotory/commands_support")
        keyboard.add(url_button1, url_button2)
        
        bot.send_message(message.chat.id, warning_message, reply_markup=keyboard, parse_mode='HTML')
                                                                                                                                                                                                                               
                              

                                                                                                                                              
                                                                                                                                                                                                                                                                                            


@bot.message_handler(func=lambda message: message.text.strip().lower() in ['—Å—Å–æ—Ä—ã', '—Å–∞–ø —Å—Å–æ—Ä—ã', '.—Å—Å–æ—Ä—ã', '!—Å—Å–æ—Ä—ã', '/—Å—Å–æ—Ä—ã'])
def handle_quarrel(message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        user_name = message.reply_to_message.from_user.first_name
        mention = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
        warning_message = f"‚õîÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è {mention} –∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –°—Å–æ—Ä—ã –≤ —á–∞—Ç–∞—Ö —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª –∑–∞–ø—Ä–µ—â–µ–Ω—ã.\n—Å–æ–≤–µ—Ç—É–µ–º –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å–æ—Ä–∏—Ç—å—Å—è, –∏–Ω–∞—á–µ –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∑–∞–≥–ª—É—à–∏—Ç—å –≤–∞—Å.\n\nü§ì<i>–°—Å–æ—Ä–∞</i> - —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–ª–∏ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–µ –º–µ–∂–¥—É –ª—é–¥—å–º–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º–∏, –∫–æ—Ç–æ—Ä–æ–µ —á–∞—Å—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–µ—Å–Ω—ã–º–∏ –≤—ã—è—Å–Ω–µ–Ω–∏—è–º–∏, –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏.\n\nüìõ–ó–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º."
        bot.send_message(message.chat.id, warning_message, reply_to_message_id=message.reply_to_message.message_id, parse_mode='HTML')
    else:
        warning_message = "‚õîÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°—Å–æ—Ä—ã –≤ —á–∞—Ç–∞—Ö —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª –∑–∞–ø—Ä–µ—â–µ–Ω—ã.\n—Å–æ–≤–µ—Ç—É–µ–º –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å–æ—Ä–∏—Ç—å—Å—è, –∏–Ω–∞—á–µ –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∑–∞–≥–ª—É—à–∏—Ç—å –≤–∞—Å.\n\nü§ì<i>–°—Å–æ—Ä–∞</i> - —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–ª–∏ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–µ –º–µ–∂–¥—É –ª—é–¥—å–º–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º–∏, –∫–æ—Ç–æ—Ä–æ–µ —á–∞—Å—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–µ—Å–Ω—ã–º–∏ –≤—ã—è—Å–Ω–µ–Ω–∏—è–º–∏, –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏.\n\nüìõ–ó–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º."
        bot.send_message(message.chat.id, warning_message, parse_mode='HTML')
        




message_changes = {}
message_history = {}
allowed_db = TinyDB('allowed_commands.json')

def load_allowed_users():
    if os.path.getsize('allowed_commands.json') > 0:
        return allowed_db.all()
    else:
        return []

def check_access(user_id):
    allowed_users = [str(user.get('user_id')) for user in load_allowed_users()]
    return str(user_id) in allowed_users

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã !–∏–∑–º–µ–Ω–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text.lower().startswith('.–∏–∑–º–µ–Ω–µ–Ω–∏—è'))
def handle_changes(message):
    if message.reply_to_message is not None and message.reply_to_message.text:
        if check_access(message.from_user.id):
            message_id = message.reply_to_message.message_id
            if message_id in message_changes:
                history = f"üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}:\n"
                for i, change in enumerate(message_changes[message_id], 1):
                    history += f"{i}. {change}\n"
                bot.reply_to(message, history)
            else:
                bot.reply_to(message, "–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    else:
        bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ !–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.edited_message_handler()
def handle_edit(message):
    message_id = message.message_id
    if message_id not in message_changes:
        message_changes[message_id] = []
        original_message = message_history.get(message_id, None)
        if original_message:
            change_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
            message_changes[message_id].append(f"{change_time}: {original_message}")

    if message_id not in message_history:
        message_history[message_id] = message.text

    change_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    message_changes[message_id].append(f"{change_time}: {message_history[message_id]}")
    message_history[message_id] = message.text






                                                                                                                                                                                                                                  
                                                     
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

allowed_db = TinyDB('allowed_commands.json')

def load_allowed_users():
    if os.path.getsize('allowed_commands.json') > 0:
        return allowed_db.all()
    else:
        return []

def check_access(user_id):
    allowed_users = [str(user.get('user_id')) for user in load_allowed_users()]
    return str(user_id) in allowed_users

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    if check_access(message.from_user.id):
        if message.chat.type != 'private':
            chat_member = bot.get_chat_member(message.chat.id, message.from_user.id)
            if chat_member.status in ['administrator', 'creator']:
                if message.text.startswith('.–¥–µ–ª '):
                    if message.reply_to_message is not None:
                        bot.delete_message(message.chat.id, message.message_id)
                        delete_messages(message)
                    else:
                        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
            else:
                bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        else:
            if message.text.startswith('.–¥–µ–ª '):
                if message.reply_to_message is not None:
                    bot.delete_message(message.chat.id, message.message_id)
                    delete_messages(message)
                else:
                    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")

def delete_messages(message):
    try:
        number = int(message.text.split('.–¥–µ–ª ')[1])
        if number > 0:
            replied_message_id = message.reply_to_message.message_id
            for i in range(number):
                try:
                    bot.delete_message(message.chat.id, replied_message_id - i)
                except Exception as e:
                    error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {replied_message_id - i}: {e}"
                    bot.send_message(admin_chat_id, error_message)
            if 'error_message' in locals():
                bot.reply_to(message, error_message)
            else:
                bot.send_message(message.chat.id, f"–Ø —É–¥–∞–ª–∏–ª {number} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
                bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAI2nGWFXKEM4_NOSx3PQJUcQuWqFU2RAALMFQACdWepSdykWqEAAVfrBDME")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.")
    except (ValueError, AttributeError):
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.")

                                                
        









    
        
admin_chat_id = '-1002129257694'
message_limit = 5
time_window = 10
alert_interval = 300
alert_interval_per_user = 300
user_messages = {}
last_alert_time = {}
flood_detected_users = set()



@bot.message_handler(content_types=['text', 'audio', 'photo', 'voice', 'video', 'document', 'sticker', 'animation'])
def check_message_frequency(message):
    user_id = message.from_user.id
    user_profile = f"[{message.from_user.first_name}](tg://user?id={user_id})"
    current_time = time.time()

    if user_id in user_messages:
        message_times = user_messages[user_id]
        message_times = list(filter(lambda x: current_time - x <= time_window, message_times))

        if len(message_times) > message_limit and user_id not in flood_detected_users:
            if user_id not in last_alert_time or current_time - last_alert_time[user_id] >= alert_interval:
                bot.send_message(admin_chat_id, f"–í —á–∞—Ç–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_profile} –∑–∞–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Ö–æ–∂–∞—è –Ω–∞ —Ñ–ª—É–¥. –ù–∞–¥–æ –±–æ—Ä–æ—Ç—å—Å—è —Å —Ñ–ª—É–¥–æ–º!", parse_mode="Markdown")
                last_alert_time[user_id] = current_time

                message_url = f"https://t.me/{message.chat.username}/{message.message_id}"
                bot.send_message(admin_chat_id, f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ]({message_url})", parse_mode="Markdown")

                flood_detected_users.add(user_id)
        elif len(message_times) > message_limit * 1:
            bot.restrict_chat_member(message.chat.id, user_id, until_date=int(time.time()) + 1800)
            bot.send_message(admin_chat_id, f"–§–ª—É–¥ –æ—Ç {user_profile} –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç.", parse_mode="Markdown")
            flood_detected_users.add(user_id)

        if user_id in last_alert_time and current_time - last_alert_time[user_id] < alert_interval_per_user:
            last_alert_time[user_id] = current_time
            
    if user_id in user_messages:
        user_messages[user_id].append(current_time)
    else:
        user_messages[user_id] = [current_time]


        
        
        










        
bot.polling(none_stop=True)